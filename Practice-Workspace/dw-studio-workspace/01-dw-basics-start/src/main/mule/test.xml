<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="testFlow" doc:id="a64a94dd-ac1b-4f63-8d43-f825c3a3c43d" >
		<ee:transform doc:name="Transform Message" doc:id="9ebb248b-ccc7-412b-9ae8-d176e0cf1dff" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

import dw::core::Arrays

var productsXml = readUrl("classpath://products.xml", "application/xml")
var products = productsXml.products.*product
---
//products.originalPrice Arrays::sumBy (price) -> if(price > 3000) price else 0 
flatten(products.originalPrice Arrays::divideBy 4)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="91c8f329-c25d-4e4a-bfbb-c1543e0c8938" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

import dw::core::Objects

var productsXml = readUrl("classpath://productswithns.xml", "application/xml")


---
//Objects::entrySet(productsXml.products)

//productsXml.products pluck (V, K, I) -> K.#

{one:"ONE", one: "One2", two:"TWO"} Objects::mergeWith {one: "Numebr1"}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
